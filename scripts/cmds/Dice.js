module.exports.config = { name: "dice", version: "2.0", hasPermission: 0, credits: "Arafat Da", description: "Play a dice betting game", commandCategory: "economy", usages: "#dice [amount] | #dice @user [amount] | #dice leaderboard/list/top", cooldowns: 5 };

const fs = require("fs"); const path = __dirname + "/cache/dice.json";

let leaderboard = fs.existsSync(path) ? JSON.parse(fs.readFileSync(path)) : {};

function saveLeaderboard() { fs.writeFileSync(path, JSON.stringify(leaderboard, null, 2)); }

module.exports.run = async function ({ api, event, args, Currencies }) { const { threadID, senderID, messageID, mentions } = event;

if (!leaderboard[senderID]) leaderboard[senderID] = { wins: 0, losses: 0 };

// Leaderboard command if (["leaderboard", "list", "top"].includes(args[0])) { const sorted = Object.entries(leaderboard) .sort((a, b) => b[1].wins - a[1].wins) .slice(0, 10);

let msg = "=== Dice Leaderboard ===\n";
for (let i = 0; i < sorted.length; i++) {
  const [uid, stats] = sorted[i];
  const name = (await api.getUserInfo(uid))[uid]?.name || "Unknown";
  msg += `\n${i + 1}. ${name} - ${stats.wins} Wins | ${stats.losses} Losses`;
}
return api.sendMessage(msg, threadID, messageID);

}

let bet = parseInt(args[0]); if (!isNaN(bet)) { const userBalance = (await Currencies.getData(senderID)).money; if (bet <= 0 || userBalance < bet) return api.sendMessage("‚ùå ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶è‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á ‡¶¨‡¶æ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶≠‡ßÅ‡¶≤‡•§", threadID, messageID);

const botRoll = Math.floor(Math.random() * 6) + 1;
const userRoll = Math.floor(Math.random() * 6) + 1;

let result = `üé≤ ‡¶§‡ßÅ‡¶Æ‡¶ø ${userRoll} ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßã

ü§ñ ‡¶¨‡¶ü ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá ${botRoll}\n`;

if (userRoll > botRoll) {
  await Currencies.increaseMoney(senderID, bet);
  leaderboard[senderID].wins++;
  result += `‚úÖ ‡¶§‡ßÅ‡¶Æ‡¶ø ${bet} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßã!`;
} else if (userRoll < botRoll) {
  await Currencies.decreaseMoney(senderID, bet);
  leaderboard[senderID].losses++;
  result += `‚ùå ‡¶§‡ßÅ‡¶Æ‡¶ø ${bet} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶π‡ßá‡¶∞‡ßá‡¶õ‡ßã!`;
} else {
  result += "‚öñÔ∏è ‡¶ñ‡ßá‡¶≤‡¶æ‡¶ü‡¶æ ‡¶°‡ßç‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡ßü‡¶®‡¶ø‡•§";
}

saveLeaderboard();
return api.sendMessage(result, threadID, messageID);

}

// PvP dice match const mentionID = Object.keys(mentions)[0]; const mentionName = mentions[mentionID]; const pvpBet = parseInt(args[1]);

if (mentionID && !isNaN(pvpBet)) { const userBal1 = (await Currencies.getData(senderID)).money; const userBal2 = (await Currencies.getData(mentionID)).money;

if (userBal1 < pvpBet || userBal2 < pvpBet)
  return api.sendMessage("‚ùå ‡¶¶‡ßÅ‡¶á‡¶ú‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá‡¶á ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§", threadID, messageID);

global.dicePvP = global.dicePvP || {};
global.dicePvP[threadID] = {
  challenger: senderID,
  opponent: mentionID,
  bet: pvpBet,
  messageID: null
};

return api.sendMessage({
  body: `${event.senderID} ${mentionName}, ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ${pvpBet} ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶°‡¶æ‡¶á‡¶∏ ‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§

‡¶∞‡¶æ‡¶ú‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá "Y" ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá "N" ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßã‡•§`, mentions: [{ id: mentionID, tag: mentionName }] }, threadID, (err, info) => global.dicePvP[threadID].messageID = info.messageID); }

// PvP response handler if (global.dicePvP && global.dicePvP[threadID]) { const pvp = global.dicePvP[threadID]; if (event.messageID === pvp.messageID && senderID === pvp.opponent) { if (event.body.toLowerCase() === "y") { const roll1 = Math.floor(Math.random() * 6) + 1; const roll2 = Math.floor(Math.random() * 6) + 1; let result = üé≤ ${pvp.challenger} ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá ${roll1} üé≤ ${pvp.opponent} ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá ${roll2}\n;

if (roll1 > roll2) {
      await Currencies.increaseMoney(pvp.challenger, pvp.bet);
      await Currencies.decreaseMoney(pvp.opponent, pvp.bet);
      leaderboard[pvp.challenger].wins++;
      leaderboard[pvp.opponent].losses++;
      result += `‚úÖ ${pvp.challenger} ‡¶ú‡¶ø‡¶§‡ßá ‡¶ó‡ßá‡¶õ‡ßá ${pvp.bet * 2} ‡¶ü‡¶æ‡¶ï‡¶æ!`;
    } else if (roll1 < roll2) {
      await Currencies.increaseMoney(pvp.opponent, pvp.bet);
      await Currencies.decreaseMoney(pvp.challenger, pvp.bet);
      leaderboard[pvp.opponent].wins++;
      leaderboard[pvp.challenger].losses++;
      result += `‚úÖ ${pvp.opponent} ‡¶ú‡¶ø‡¶§‡ßá ‡¶ó‡ßá‡¶õ‡ßá ${pvp.bet * 2} ‡¶ü‡¶æ‡¶ï‡¶æ!`;
    } else {
      result += "‚öñÔ∏è ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡¶ü‡¶ø ‡¶°‡ßç‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶ï‡¶æ‡¶∞‡ßã ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡¶æ‡¶ü‡ßá‡¶®‡¶ø‡•§";
    }

    saveLeaderboard();
    delete global.dicePvP[threadID];
    return api.sendMessage(result, threadID);
  } else if (event.body.toLowerCase() === "n") {
    delete global.dicePvP[threadID];
    return api.sendMessage("‚ùå ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", threadID);
  }
}

}

return api.sendMessage("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü!\n‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã:\n#dice [amount]\n#dice @user [amount]\n#dice leaderboard | list | top", threadID, messageID); };

