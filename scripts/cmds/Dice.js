// Dice Game with PvP Challenge, Single Player, and Leaderboard const { getStreamFromURL } = global.utils;

let challenges = {}; let leaderboard = {};

module.exports = { config: { name: "dice", version: "4.0", author: "Arafat Da", countDown: 5, role: 0, shortDescription: "‡¶°‡¶æ‡¶á‡¶∏ ‡¶ó‡ßá‡¶Æ - PvP, ‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤ ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶ì ‡¶≤‡¶ø‡¶°‡¶æ‡¶∞‡¶¨‡ßã‡¶∞‡ßç‡¶°", longDescription: "‡¶°‡¶æ‡¶á‡¶∏ ‡¶ó‡ßá‡¶Æ: ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßá PvP ‡¶ñ‡ßá‡¶≤‡¶æ + ‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤ ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶° + ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ + ‡¶≤‡¶ø‡¶°‡¶æ‡¶∞‡¶¨‡ßã‡¶∞‡ßç‡¶°", category: "game", guide: { en: "{pn} [amount] (@opponent)\n{pn} leaderboard" } },

onStart: async function ({ message, event, args, usersData, economy, commandName }) { const senderID = event.senderID; const mentionIDs = Object.keys(event.mentions || {});

if (['leaderboard', 'list', 'top'].includes(args[0])) {
  let board = Object.entries(leaderboard)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10)
    .map(async ([id, score], i) => {
      const name = await usersData.getName(id);
      return `${i + 1}. ${name}: ${score} ‡¶ú‡ßü`;
    });
  const resolved = await Promise.all(board);
  return message.reply("üèÜ ‡¶°‡¶æ‡¶á‡¶∏ ‡¶≤‡¶ø‡¶°‡¶æ‡¶∞‡¶¨‡ßã‡¶∞‡ßç‡¶°:\n\n" + resolved.join("\n"));
}

const bet = parseInt(args[0]);
if (!bet || isNaN(bet) || bet <= 0)
  return message.reply("‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßá‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßã! ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: #dice 100 ‡¶Ö‡¶•‡¶¨‡¶æ #dice 100 @‡¶∞‡¶æ‡¶ï‡¶ø‡¶¨");

if (mentionIDs.length === 0) {
  // Single player mode
  const balance = await economy.getMoney(senderID);
  if (balance < bet) return message.reply(`‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ${bet} ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á!`);

  await economy.updateMoney(senderID, -bet);
  const roll = Math.floor(Math.random() * 6) + 1;
  const win = roll >= 4;

  if (win) {
    await economy.updateMoney(senderID, bet * 2);
    leaderboard[senderID] = (leaderboard[senderID] || 0) + 1;
    return message.reply(`üé≤ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßá‡¶≤‡¶æ ${roll}! ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßã ‡¶è‡¶¨‡¶Ç ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßã ${bet * 2} ‡¶ï‡ßü‡ßá‡¶®!`);
  } else {
    return message.reply(`üé≤ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßá‡¶≤‡¶æ ${roll}! ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶π‡ßá‡¶∞‡ßá ‡¶ó‡ßá‡¶õ‡ßã ‡¶è‡¶¨‡¶Ç ‡¶π‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶õ‡ßã ${bet} ‡¶ï‡ßü‡ßá‡¶®!`);
  }
}

// PvP mode
const opponentID = mentionIDs[0];
if (opponentID === senderID) return message.reply("‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ñ‡ßá‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‡¶®‡¶æ!");

const senderMoney = await economy.getMoney(senderID);
const opponentMoney = await economy.getMoney(opponentID);

if (senderMoney < bet) return message.reply(`‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ (${bet}) ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á!`);
if (opponentMoney < bet) return message.reply(`‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡ßç‡¶¨‡¶®‡ßç‡¶¶‡ßç‡¶¨‡ßÄ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ (${bet}) ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á!`);

const senderName = await usersData.getName(senderID);
const opponentName = await usersData.getName(opponentID);

challenges[opponentID] = {
  challengerID: senderID,
  bet: bet,
  timestamp: Date.now()
};

return message.reply({
  body: `${opponentName}, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ${senderName}-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶°‡¶æ‡¶á‡¶∏ ‡¶ñ‡ßá‡¶≤‡¶§‡ßá ‡¶∞‡¶æ‡¶ú‡¶ø?\n\n‡¶¨‡ßá‡¶ü: ${bet} ‡¶ï‡ßü‡ßá‡¶®\n\n**‡¶∞‡¶æ‡¶ú‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßã: Y**\n**‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßã: N**`,
  mentions: [{ tag: opponentName, id: opponentID }]
});

},

onReply: async function ({ message, event, reply, usersData, economy }) { const replyUser = event.senderID; const content = event.body.toLowerCase();

const challenge = challenges[replyUser];
if (!challenge) return;

const { challengerID, bet } = challenge;
const challengerName = await usersData.getName(challengerID);
const opponentName = await usersData.getName(replyUser);

if (content === "n") {
  delete challenges[replyUser];
  return message.reply(`${opponentName} ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßá‡¶®‡¶ø‡•§ ‡¶ñ‡ßá‡¶≤‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
}

if (content !== "y") return;

const challengerMoney = await economy.getMoney(challengerID);
const opponentMoney = await economy.getMoney(replyUser);

if (challengerMoney < bet || opponentMoney < bet) {
  delete challenges[replyUser];
  return message.reply(`‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ú‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á‡•§ ‡¶ñ‡ßá‡¶≤‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤‡•§`);
}

await economy.updateMoney(challengerID, -bet);
await economy.updateMoney(replyUser, -bet);

const roll1 = Math.floor(Math.random() * 6) + 1;
const roll2 = Math.floor(Math.random() * 6) + 1;
const dice = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"];

let result;
if (roll1 > roll2) {
  await economy.updateMoney(challengerID, bet * 2);
  leaderboard[challengerID] = (leaderboard[challengerID] || 0) + 1;
  result = `${challengerName} ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá ${bet * 2} ‡¶ï‡ßü‡ßá‡¶®!`;
} else if (roll2 > roll1) {
  await economy.updateMoney(replyUser, bet * 2);
  leaderboard[replyUser] = (leaderboard[replyUser] || 0) + 1;
  result = `${opponentName} ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá ${bet * 2} ‡¶ï‡ßü‡ßá‡¶®!`;
} else {
  await economy.updateMoney(challengerID, bet);
  await economy.updateMoney(replyUser, bet);
  result = "‡¶ñ‡ßá‡¶≤‡¶æ ‡¶°‡ßç‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶¶‡ßÅ‡¶á‡¶ú‡¶®‡¶ï‡ßá‡¶á ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§";
}

delete challenges[replyUser];

return message.reply(
  `üé≤ **‡¶°‡¶æ‡¶á‡¶∏ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú** üé≤\n\n` +
  `${challengerName}: ${dice[roll1 - 1]} (${roll1})\n` +
  `${opponentName}: ${dice[roll2 - 1]} (${roll2})\n\n` +
  result
);

} };

