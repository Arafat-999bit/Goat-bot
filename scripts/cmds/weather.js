const axios = require("axios");

module.exports = {
  config: {
    name: "weather",
    aliases: ["‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ"],
    version: "1.3",
    author: "Arafat Da",
    countDown: 5,
    role: 0,
    shortDescription: {
      bn: "‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ì ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø ‡¶â‡¶†‡¶æ/‡¶Ö‡¶∏‡ßç‡¶§‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì"
    },
    longDescription: {
      bn: "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ, ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ, ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø ‡¶â‡¶†‡¶æ ‡¶ì ‡¶Ö‡¶∏‡ßç‡¶§ ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶¶‡¶ø‡¶®/‡¶∞‡¶æ‡¶§‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì‡•§"
    },
    category: "utility",
    guide: {
      bn: "{pn} ‡¶∂‡¶π‡¶∞‡ßá‡¶∞_‡¶®‡¶æ‡¶Æ (‡¶Ø‡ßá‡¶Æ‡¶®: {pn} ‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ)"
    }
  },

  onStart: async function ({ api, event, args }) {
    const location = args.join(" ");
    if (!location) return api.sendMessage("‚ö†Ô∏è ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®‡•§\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: #weather ‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤", event.threadID);

    const apiKey = "3fa5f106e4mshb0e1d52c96b1b65p1cf890jsn0031aaf5e24f";
    const host = "weatherapi-com.p.rapidapi.com";

    try {
      const [currentRes, astronomyRes] = await Promise.all([
        axios.get(`https://${host}/current.json?q=${encodeURIComponent(location)}`, {
          headers: {
            "X-RapidAPI-Key": apiKey,
            "X-RapidAPI-Host": host
          }
        }),
        axios.get(`https://${host}/astronomy.json?q=${encodeURIComponent(location)}`, {
          headers: {
            "X-RapidAPI-Key": apiKey,
            "X-RapidAPI-Host": host
          }
        })
      ]);

      const current = currentRes.data.current;
      const loc = currentRes.data.location;
      const astro = astronomyRes.data.astronomy.astro;

      // Sunrise & Sunset Duration Calculation
      const [sunriseHour, sunriseMinute] = astro.sunrise.split(" ")[0].split(":").map(Number);
      const [sunsetHour, sunsetMinute] = astro.sunset.split(" ")[0].split(":").map(Number);
      const sunriseAmPm = astro.sunrise.split(" ")[1];
      const sunsetAmPm = astro.sunset.split(" ")[1];

      const sunrise24 = sunriseHour % 12 + (sunriseAmPm === "PM" ? 12 : 0);
      const sunset24 = sunsetHour % 12 + (sunsetAmPm === "PM" ? 12 : 0);

      const sunriseDate = new Date(0, 0, 0, sunrise24, sunriseMinute);
      const sunsetDate = new Date(0, 0, 0, sunset24, sunsetMinute);
      const durationMs = sunsetDate - sunriseDate;
      const durationHours = Math.floor(durationMs / (1000 * 60 * 60));
      const durationMinutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));

      const message = 
`üìç ‡¶∂‡¶π‡¶∞: ${loc.name}, ${loc.country}
--------------------------------
üå°Ô∏è ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ: ${current.temp_c}¬∞C
üå§Ô∏è ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ: ${current.condition.text}
üí® ‡¶¨‡¶æ‡¶§‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ó‡¶§‡¶ø: ${current.wind_kph} ‡¶ï‡¶ø‡¶Æ‡¶ø/‡¶ò‡¶£‡ßç‡¶ü‡¶æ
üíß ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ: ${current.humidity}%
üåÖ ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø ‡¶â‡¶†‡¶¨‡ßá: ${astro.sunrise}
üåá ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø ‡¶Ö‡¶∏‡ßç‡¶§ ‡¶Ø‡¶æ‡¶¨‡ßá: ${astro.sunset}
üïí ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø: ${durationHours} ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ${durationMinutes} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
üìÖ ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü: ${current.last_updated}`;

      return api.sendMessage(message, event.threadID);

    } catch (error) {
      console.error(error);
      return api.sendMessage("‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§\n‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã‡•§", event.threadID);
    }
  }
};
